## 로드 스토어 명령어 -> 로드 명령어는 한클럭에 안끝나


3. 프리인덱스
mov r4,#16
ldr r0,[r1,#4]  @r1 = 0x30100000

31        24    23         16   15          8    7            0
------------------------------------------------------------
XXXX XXXX    XXXX XXXX    XXXX XXXX    XXXX XXXX
------------------------------------------------------------
str r0,[r2],#4 @


4. 포스트인덱스
mov r4,#16
ldr r0,[r1],#0x64  @r1 = 0x30100000

31        24    23         16   15          8    7            0
------------------------------------------------------------
XXXX XXXX    XXXX XXXX    XXXX XXXX    XXXX XXXX
------------------------------------------------------------
str r0,[r2],#4 @r2=0x30200000


강사님 예문 

ldr r0, label_1
....
....
....
label_1:dcd 0x12345678
----------------
-> 이 경우 r0에 주소값이 입력됨


=====================

실습
#if 1
	/* Sum of Decimal Test */
{
	int start, end, sum;
	start = 1;
	end = 100;

	Uart_Printf("Start sum of decimal test\n");
	
	sum = SUM_OF_DEC(start,end);
	Uart_Printf("ASM : Sum from %d to %d is [%d]\n",start,end,sum);

	sum = 0;
	for (start=1;start<=end;start++) {
		sum += start;
	}
	Uart_Printf("C   : Sum from %d to %d is [%d]\n",1,end,sum);
}
#endif


어셈블리 루프문은 
do{}while(평가식)


어셈블리식 답은
SUM_OF_DEC:
	/* IMPLEMENT HERE  */
	mov	r3, #0x0	/*; initialize sum */
sum_loop:

	add r3,r3,r0 @sum up
	add r0,r0,#1
	cmp r0,r1
	bls sum_loop
	mov r0,r3
	mov pc, lr	/* return */
	
이번 실습 Memfill 함수 어셈블리화 시키기

c언어 버전
void MemFill(unsigned long ptr, unsigned long pattern, int size)
{
	int i;
	unsigned long *data;
	data = (unsigned long *)ptr;

	for (i=0; i<size;i++)
		*data++ = pattern;
}


============
	.globl  MEMCPY_SINGLE
MEMCPY_SINGLE:
	stmfd sp!, {r4-r5, lr} 	/* push */
	/* IMPLEMENT HERE */
copy_loop_single:

	@@@ post index addressing mode
	@load -> store -> count
	@ MEMCPY_SINGLE(dst,src,size);
	@@@@@@@@@@@@@@@@@@@@@@
	
	ldrb r3,[r1],#1
	strb r3,[r0],#1
	sub r2,r2,#1
	cmp r2,#0 @ while
	bgt copy_loop_single
	

	@전략
	@1. 반복문 조건 r3 하나씩 인덳스 올림
	@2. size만큼씩 str 명령어 수행
	@3. r3가 dst될때 까지, 이때 반복 [src+r3]
	@4. 
	@mov r4,#16
	@ldr r0,[r1,#4]  @r1 = 0x30100000
	@@@@@@@@@@@@@@@@@@@@@@


	ldmfd sp!, {r4-r5, pc}	/* pop */

=D311~====================================================================
블럭 전송 명령
===

ldm r0,{r4,r5,r6} @읽기
m=multiple
@ r0에 주소를 담아놓고
@ 읽기 r0 = 0x30100000
@ 장점 3줄->1줄로 줄어들고, 메모리카피 속도도 더 빠르다
@ ldr r4,[r0]! + ldr r5,[r0]! + ldr r6,[r0]!  =  ldm r0,{r4,r5,r6} :라인 수 뿐만 아니라, 속도도 빠르다
@ ldm r0,{r4,r5,r6},좋지만, DMA가 더 빠르다 한계 : 레지스터 갯수가 허용하는 한까지 사용 가능하다.
@ 단순화버전 ldm r0,{r4-r6}, 혹은 ldm r0,{r4-r6,r9}
@ ldm r0!,{r4,r5,r6}  ->> 오토업데이트, 숫자가 16만큼 업데이트 된다. r0가 +16된다 하지만 : 
ldmia r0!,{r4,r5,r6} ->> 인크리먼트 에프터 : 증가하는 방향
ldmda r0!,{r4,r5,r6} ->> 디크리먼트 에프터 : 감소하는 방향
ldm??r0!,{r4,r5,r6} ->> ?? 자리에 올수있는것들이 많아요


stm r1,{r4,r5,r6} @쓰기
m=multiple

===============
ldmfd sp!, {r4-r5, pc}	/* pop */
->>명령어의 의미
stmdb : ARM 스텍 푸쉬
db= fd
ia=
=====
스텍의 완벽한 동작에 대한 이해 책:
stmfd sp!, {r4-r5, lr} 	/* push */
ldmfd sp!, {r4-r5, pc}	/* pop */
 = move pc,lr 역할도 한다!!

스텍포인터 :  ARM 은 Full-desending 이다.

ldmfd sp!, {r4-r5, pc}	/* pop */
리턴 역할까지 겸한다


ldmfd sp!, {r4-r5, pc}^	/* pop */
인터럽트 핸들러 만들때 사용, ^ 를 붙여라
^ : SPSR을  CPSR 복구하기!
인터럽트 핸들러 돌아올떄 CPSR 복원
이 코드는 CPSR과 PC를 동시복원해야하는데, 이코드로! 꼭 중요하다.

========================================
push pop명령어 의미에 대하여

subs r2, r2, #3 ->> s접미사를 배웠는데, s접미사 쓰면 cmp 빼도 됨
s접미사 써서 0과 비교하는 경우 s접미사로 최적화 가능

=========================================
 ldmfd sp!, {r4-r5, pc}	/* pop */
 stmfd sp!, {r4-r5, lr} 	/* push */
r4,r5 푸쉬, 팝을 왜했을까???
왜 move pc,lr 이 필요한겨?? 
함수 호출하고 돌아와있는데 레지스터 값이 그대로있어야해
APCS 규칙에 따르면, (ARM/Thumb P.C.S) ->> R0, R1,R2,R3 레지스터 제외하고 나머지는 꼭 푸쉬팝을 해야됭
함수 호출하고 돌아올때, 전과 후가 같아야 해
그래서 푸쉬팝을 해야됭, 무브만 하면 의도하지않게 값이 바뀌어요
R0, R1,R2,R3은 임시용도라서, push,pop할때 쓰면 절대 안되!!!
R4,R5
왜 45만 하면되나? r4,r5만 오염되니까요
r3은 왜 ? -> 어차피 임시라서
만약 푸쉬팝 안했어 안하면 어떻게 되나면
잘 돌아갈때도 있고, 안돌아갈때도 있고, 규칙을 어긴 시한폭탄 코드가 됨.
어셈블리 코딩시 반드시 알아야 하는것
푸쉬팝을 왜 해야하는지
어떤상황인지 : 
어떤 레지스터 대상으로 해야하는지 :  r4~
-----------------------------------------------------
인터럽트 핸들러는  R0,1,2,3 또한 예외가 아니야
 stmfd sp!, {r0-r5, lr} 	/* push */
 ldmfd sp!, {r0-r5, pc}	/* pop */
인터럽트에 한해서는 항상!! 예외없이 모든레지스터를
원칙은 오염된 레지스터에 대하여 푸쉬팝을 해 줘야 함.
-----------------------
[lr레지스터에 대하여] - ARM프로세서의 단점아닌 단점에 대하여
br 은 pc-4를 lr에 저장하고 점프
lr의 한계, 1단계 호출시에만 할수 있다. 그래서 스텍 푸쉬할때, 


http://guileschool.com/2017/06/01/BBB-handbook/
============================================

31       24 23       16 15        8  7         0
------------------------------------------------------------
0000 0000 0000 0000 0000 0000 0000 0000
------------------------------------------------------------




	.globl MMU_EnableICache
MMU_EnableICache:
	/* IMPLEMENT HERE */      
	mrc  p15,0,r0,c1,c0,0
	orr  r0,r0,#R1_I
	mcr  p15,0,r0,c1,c0,0
	mov	 pc,lr

