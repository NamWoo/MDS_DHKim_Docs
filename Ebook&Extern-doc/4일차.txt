Cache Memory
1) I-Cache/D-Cache 활성화방법
2) Memory Mapped I/O D-Cache 비활성화: 하드웨어 레지스터는 D-Cache off
3) Cache Clean과 Cache Flush 


MMU
1)링커(Linker) 스크립트 파일에서의 주소 표현
2)예외처리(Exception) 벡터 테이블
3)보호된 메모리 접근 -> Data Abort
4)존재하지 않는 가상 메모리 접근 -> Data Abort


==============================================
0x30011fcc                __TEXT_END__ = .
0x30011fcc                . = ALIGN (0x4)
로케이션 포인터를 
다음 섹션을 배려해서 다음 섹션이 4의 정수배를 
ALIGN (0x40)-> 64바이트 정렬

힙의 시작과 끝
=============================================
	/* function initializing stacks */
InitStacks:
	/* Don't use DRAM,such as stmfd,ldmfd......
	 * SVCstack is initialized before
	 * Under toolkit ver 2.5, 'msr cpsr,r1' can be used instead of 'msr cpsr_cxsf,r1'
	 */
	mrs	 r0,cpsr
	bic	r0,r0,#Mode_MASK
	orr	r1,r0,#Mode_UND|NOINT
	msr	 cpsr_cxsf,r1		/* UndefMode */
	ldr	sp,=UndefStack
	
	orr	r1,r0,#Mode_ABT|NOINT
	msr	 cpsr_cxsf,r1		/* AbortMode */
	ldr	sp,=AbortStack

	orr	r1,r0,#Mode_IRQ|NOINT
	msr	 cpsr_cxsf,r1		/* IRQMode */
	ldr	sp,=IRQStack
    
	orr	r1,r0,#Mode_FIQ|NOINT
	msr	 cpsr_cxsf,r1		/* FIQMode */
	ldr	sp,=FIQStack

	orr	r1,r0,#Mode_SYS|NOINT
	msr	 cpsr_cxsf,r1		/* SystemMode */
	ldr	sp,=UserStack
	
	bic	r0,r0,#I_Bit
	orr	r1,r0,#Mode_SVC
	msr cpsr_cxsf,r1		/* SVCMode interrupt enable */
	ldr	sp,=SVCStack
	
	/* USER mode has not be initialized. */
	
	mov pc,lr 
	/* The LR register won't be valid if the current mode is not SVC mode. */
======================================================


RESET 예외
1.POR (파워온)
2.HW리셋(리셋스위치 리셋)
3.WDT 와치독리셋
4.S/W리셋
5.PC=30000000


==
prefetch Data abort
1.비정렬 엑세스 (Data abort only)
2.보호된 메모리 엑세스
3.존재하지 않는 가상 메모리 엑세스

================================
	/* macro 정의 */
	.macro HANDLER, HandlerLabel, HandleLabel
\HandlerLabel:
	sub		sp,sp,#4		/* decrement sp(to store jump address) */
	stmfd	sp!,{r0}			/* PUSH the work register to stack(lr doesn`t push because */ 
						   	/* it return to original address) */
	ldr		r0,=\HandleLabel	/* load the address of HandleXXX to r0 */
	ldr		r0,[r0]         		/* load the contents(service routine start address) of HandleXXX */
	str		r0,[sp,#4]      	/* store the contents(ISR) of HandleXXX to stack */
	ldmfd	sp!,{r0,pc}     	/* POP the work register and pc(jump to ISR) */
	.endm

	.text
	.globl _start
_start:

	/* ResetHandler가 처음부터 나오는 것이 아니라 
	 * vector 주소 영역에는 reset vector가 존재해야 한다
	 * exception이 발생하면 ARM은 하드웨어적으로 다음 주소로 분기된다
	 */
	b	ResetHandler
	b	HandlerUndef			/* handler for Undefined mode */
	b	HandlerSWI			/* handler for SWI interrupt */
	b	HandlerPabort			/* handler for PAbort */
	b	HandlerDabort			/* handler for DAbort */
	b	.						/* reserved */
	b	HandlerIRQ				/* handler for IRQ interrupt */
	b	HandlerFIQ				/* handler for FIQ interrupt */

	.ltorg
HANDLER HandlerFIQ, HandleFIQ
HANDLER HandlerIRQ, HandleIRQ
HANDLER HandlerUndef, HandleUndef
HANDLER HandlerSWI, HandleSWI
HANDLER HandlerDabort, HandleDabort
HANDLER HandlerPabort, HandlePabort

-핸들러 등록이 꼭 필요한 이유 : 런타임에 동적으로 필요한 핸들러함수로 점프하기 위해서
-비정렬함수 abort->


=================================
FIQ 가 IRQ보다 빠르게 처리되는 이유
1)파이프라인 파괴가 되는것을 방지 : 백터테이블의 맨 마지막에 존재하기 때문에 파이프라인을 깨트리지 않고 코딩할수 있다(그 다음줄에 코딩하면)
2)우선순위가 IRQ보다 높다
3)Private 한 레지스터가 5개 존재 : 푸쉬팝을 안하고 써도 되요, (stm sp!,{r8,r9} ->> 생략가능)